{"version":3,"sources":["ng-gen.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA,GAAA;;AAAA,EAAA,GAAA,GAAM,OAAO,CAAC,MAAR,CAAe,QAAf,EAAyB,EAAzB,CAAN,CAAA;;AAAA,EAEA,GAAG,CAAC,OAAJ,CAAY,KAAZ,EAAmB,SAAC,UAAD,EAAa,EAAb,GAAA;WAAoB,SAAC,EAAD,GAAA;aACrC,EAAA,CAAG,SAAC,OAAD,EAAU,MAAV,GAAA;AACD,YAAA,wCAAA;AAAA,QAAA,SAAA,GAAY,EAAA,CAAA,CAAZ,CAAA;AAAA,QAEA,cAAA,GAAiB,SAAC,MAAD,GAAA;iBAAY,SAAC,GAAD,GAAA;AAC3B,gBAAA,KAAA;AAAA;qBACE,aAAA,CAAc,SAAU,CAAA,MAAA,CAAV,CAAkB,GAAlB,CAAd,EADF;aAAA,cAAA;AAGE,cADI,cACJ,CAAA;qBAAA,MAAA,CAAO,KAAP,EAHF;aAD2B;UAAA,EAAZ;QAAA,CAFjB,CAAA;AAAA,QAQA,aAAA,GAAgB,SAAC,GAAD,GAAA;AACd,cAAA,WAAA;AAAA,UADgB,YAAA,OAAO,WAAA,IACvB,CAAA;AAAA,UAAA,IAAG,IAAH;mBACE,OAAA,CAAQ,KAAR,EADF;WAAA,MAEK,IAAG,KAAA,IAAU,KAAK,CAAC,IAAnB;mBACH,KAAK,CAAC,IAAN,CAAW,cAAA,CAAe,MAAf,CAAX,EAAmC,cAAA,CAAe,OAAf,CAAnC,EADG;WAAA,MAAA;mBAGH,MAAA,CAAO,KAAA,CAAM,8BAAN,CAAP,EAHG;WAHS;QAAA,CARhB,CAAA;eAgBA,aAAA,CAAc,SAAS,CAAC,IAAV,CAAA,CAAd,EAjBC;MAAA,CAAH,EADqC;IAAA,EAApB;EAAA,CAAnB,CAFA,CAAA;;AAAA,EAsBA,GAAG,CAAC,OAAJ,CAAY,SAAZ,EAAuB,SAAC,GAAD,GAAA;WAAS,SAAC,EAAD,GAAA;aAC9B,GAAA,CAAI,EAAJ,CAAO,CAAC,IAAR,CAAa,CAAC,SAAA,GAAA,CAAD,CAAb,EAAmB,SAAC,GAAD,GAAA;AAAS,cAAM,GAAN,CAAT;MAAA,CAAnB,EAD8B;IAAA,EAAT;EAAA,CAAvB,CAtBA,CAAA;;AAAA,EAyBA,GAAG,CAAC,OAAJ,CAAY,MAAZ,EAAoB,SAAC,QAAD,GAAA;WAAc,SAAC,KAAD,GAAA;aAChC,QAAA,CAAS,CAAC,SAAA,GAAA,CAAD,CAAT,EAAe,KAAf,EADgC;IAAA,EAAd;EAAA,CAApB,CAzBA,CAAA;AAAA","file":"ng-gen.js","sourceRoot":"/source/","sourcesContent":["gen = angular.module 'ng-gen', []\n\ngen.factory 'gen', ($rootScope, $q) -> (fn) ->\n  $q (resolve, reject) ->\n    generator = fn()\n\n    putInGenerator = (method) -> (val) ->\n      try\n        handlePromise generator[method](val)\n      catch error\n        reject error\n\n    handlePromise = ({value, done}) ->\n      if done\n        resolve value\n      else if value and value.then\n        value.then putInGenerator('next'), putInGenerator('throw')\n      else\n        reject Error 'gen works only with promises'\n\n    handlePromise generator.next()\n\ngen.factory 'mainGen', (gen) -> (fn) ->\n  gen(fn).then (->), (err) -> throw err\n\ngen.factory 'wait', ($timeout) -> (delay) ->\n  $timeout (->), delay\n"]}